// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: grpc/vendor.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocalVendor_CreateVolume_FullMethodName  = "/localcluster.LocalVendor/CreateVolume"
	LocalVendor_GetVolumeInfo_FullMethodName = "/localcluster.LocalVendor/GetVolumeInfo"
	LocalVendor_DeleteVolume_FullMethodName  = "/localcluster.LocalVendor/DeleteVolume"
)

// LocalVendorClient is the client API for LocalVendor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalVendorClient interface {
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error)
	GetVolumeInfo(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeInfo, error)
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error)
}

type localVendorClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalVendorClient(cc grpc.ClientConnInterface) LocalVendorClient {
	return &localVendorClient{cc}
}

func (c *localVendorClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeReply)
	err := c.cc.Invoke(ctx, LocalVendor_CreateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localVendorClient) GetVolumeInfo(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeInfo)
	err := c.cc.Invoke(ctx, LocalVendor_GetVolumeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localVendorClient) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeReply)
	err := c.cc.Invoke(ctx, LocalVendor_DeleteVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalVendorServer is the server API for LocalVendor service.
// All implementations must embed UnimplementedLocalVendorServer
// for forward compatibility.
type LocalVendorServer interface {
	CreateVolume(context.Context, *VolumeRequest) (*VolumeReply, error)
	GetVolumeInfo(context.Context, *VolumeRequest) (*VolumeInfo, error)
	DeleteVolume(context.Context, *VolumeRequest) (*VolumeReply, error)
	mustEmbedUnimplementedLocalVendorServer()
}

// UnimplementedLocalVendorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocalVendorServer struct{}

func (UnimplementedLocalVendorServer) CreateVolume(context.Context, *VolumeRequest) (*VolumeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedLocalVendorServer) GetVolumeInfo(context.Context, *VolumeRequest) (*VolumeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeInfo not implemented")
}
func (UnimplementedLocalVendorServer) DeleteVolume(context.Context, *VolumeRequest) (*VolumeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedLocalVendorServer) mustEmbedUnimplementedLocalVendorServer() {}
func (UnimplementedLocalVendorServer) testEmbeddedByValue()                     {}

// UnsafeLocalVendorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalVendorServer will
// result in compilation errors.
type UnsafeLocalVendorServer interface {
	mustEmbedUnimplementedLocalVendorServer()
}

func RegisterLocalVendorServer(s grpc.ServiceRegistrar, srv LocalVendorServer) {
	// If the following call pancis, it indicates UnimplementedLocalVendorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocalVendor_ServiceDesc, srv)
}

func _LocalVendor_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVendorServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalVendor_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVendorServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalVendor_GetVolumeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVendorServer).GetVolumeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalVendor_GetVolumeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVendorServer).GetVolumeInfo(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalVendor_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVendorServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalVendor_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVendorServer).DeleteVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalVendor_ServiceDesc is the grpc.ServiceDesc for LocalVendor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalVendor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localcluster.LocalVendor",
	HandlerType: (*LocalVendorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _LocalVendor_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolumeInfo",
			Handler:    _LocalVendor_GetVolumeInfo_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _LocalVendor_DeleteVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/vendor.proto",
}
